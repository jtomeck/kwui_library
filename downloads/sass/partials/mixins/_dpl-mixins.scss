@import '../_dpl-variables';

/* CUSTOM MIXINS */
@mixin background($start, $end, $percentTop: 0%, $percentBottom: 100%, $filter: true) {
    background: -moz-linear-gradient(top, $start $percentTop, $end $percentBottom);
    background: -webkit-gradient(linear, left top, left bottom, color-stop($percentTop, $start), color-stop($percentBottom, $end));
    background: -webkit-linear-gradient(top, $start $percentTop, $end $percentBottom);
    background: -o-linear-gradient(top, $start $percentTop, $end $percentBottom);
    background: -ms-linear-gradient(top, $start $percentTop, $end $percentBottom);
    background: linear-gradient(to bottom, $start $percentTop, $end $percentBottom);

    @if $filter == true {
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start)}', endColorstr='#{ie-hex-str($end)}', GradientType=0);

        /* IE6-9 */
    }
    background-repeat: no-repeat;
}

@mixin opacity($value) {
    $IEValue: $value*100;
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
    filter: alpha(opacity=$IEValue);
}

//Mixin to use rems with pixel fall back on any property.
// use pixel values in SASS files
/* example usages
p{
    @include rem(font-size, 16px);
}

p{
    font-size: 16px;
    font-size: 1.6rem;
}

------

p{
    @include rem(margin, 16px);
}

p{
    margin: 16px;
    margin: 1.6rem;
}

------
p{
    @include rem(margin, 16px 4px 5px 6px);
}

p{
    margin: 16px 4px 5px 6px;
    margin: 1.6rem .4rem .5rem .6rem;
}


------
end of examples*/

@function parseInt($n) {
    @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
    $px: ();
    $rem: ();

    @each $value in $values {

        @if $value == 0 or $value == auto {
            $px: append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $unit: unit($value);
            $val: parseInt($value);
            @if $unit == "px" {
                $px: append($px, $value);
                $rem: append($rem, $val / 10 * 1rem);
            }
            @if $unit == "rem" {
                $px: append($px, $val * 10 * 1px);
                $rem: append($rem, $value);
            }
        }
    }
    #{$property}: $px;
    #{$property}: $rem;
}

// Button sizes
@mixin button-size($padding-vertical, $padding-horizontal, $font-size, $line-height, $border-radius) {
    @include rem(padding, $padding-vertical $padding-horizontal);
    @include rem(font-size, $font-size);
    line-height: $line-height;
    @include rem(border-radius, $border-radius);
}

@mixin optional-at-root($sel) {
    @at-root #{if(not &, $sel, selector-append(&, $sel))} {
        @content;
    }
}

@mixin placeholderText {
    @include optional-at-root('::-webkit-input-placeholder') {
        @content;
    }

    @include optional-at-root(':-moz-placeholder') {
        @content;
    }

    @include optional-at-root('::-moz-placeholder') {
        @content;
    }

    @include optional-at-root(':-ms-input-placeholder') {
        @content;
    }
}

@mixin faux-block() {
    @extend .clearfix;
    display: block;
}

// Flexbox display
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
    float: none;
    -webkit-box-flex: $values;
    -moz-box-flex: $values;
    -webkit-flex: $values;
    -ms-flex: $values;
    flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
    -webkit-flex-direction: $direction;
    -moz-flex-direction: $direction;
    -ms-flex-direction: $direction;
    flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
    -webkit-flex-wrap: $wrap;
    -moz-flex-wrap: $wrap;
    -ms-flex-wrap: $wrap;
    flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
    -webkit-flex-flow: $flow;
    -moz-flex-flow: $flow;
    -ms-flex-flow: $flow;
    flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
    -webkit-box-ordinal-group: $val;
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-order: $val;
    order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
    -webkit-flex-grow: $grow;
    -moz-flex-grow: $grow;
    -ms-flex-grow: $grow;
    flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
    -webkit-flex-shrink: $shrink;
    -moz-flex-shrink: $shrink;
    -ms-flex-shrink: $shrink;
    flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
    -webkit-flex-basis: $width;
    -moz-flex-basis: $width;
    -ms-flex-basis: $width;
    flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
    -webkit-justify-content: $justify;
    -moz-justify-content: $justify;
    -ms-justify-content: $justify;
    justify-content: $justify;
    -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
    -webkit-align-content: $align;
    -moz-align-content: $align;
    -ms-align-content: $align;
    align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
    -webkit-align-items: $align;
    -moz-align-items: $align;
    -ms-align-items: $align;
    align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
    -webkit-align-self: $align;
    -moz-align-self: $align;
    -ms-align-self: $align;
    align-self: $align;
}
// ===== IE media query mixin =====
/**

.test {
    @include ie-mq(){ color: red; }
}

**/
@mixin ie-mq() {
    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        @content;
    }
}
// ===== Firefox media query mixin =====
/**

.test {
    @include ff-mq(){ color: red; }
}

**/
@mixin ff-mq() {
    @-moz-document url-prefix() {
        @content;
    }
}

